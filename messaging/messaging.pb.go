// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messaging.proto

package messaging

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Sender               string   `protobuf:"bytes,1,opt,name=Sender,proto3" json:"Sender,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Message) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "messaging.Message")
}

func init() { proto.RegisterFile("messaging.proto", fileDescriptor_42a1718997f046ec) }

var fileDescriptor_42a1718997f046ec = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0xcf, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0x59, 0x73, 0xb1, 0xfb, 0x82, 0x39, 0xa9, 0x42, 0x62, 0x5c, 0x6c, 0xc1, 0xa9, 0x79, 0x29, 0xa9,
	0x45, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x50, 0x9e, 0x90, 0x04, 0x5c, 0x89, 0x04, 0x13,
	0x58, 0x02, 0xc6, 0x35, 0xea, 0x64, 0xe4, 0x12, 0xf0, 0x85, 0x19, 0x15, 0x9c, 0x5a, 0x54, 0x96,
	0x99, 0x9c, 0x2a, 0x64, 0xc3, 0xc5, 0x17, 0x5c, 0x52, 0x94, 0x9a, 0x98, 0x0b, 0x55, 0x55, 0x2c,
	0x24, 0xa4, 0x87, 0x70, 0x00, 0x54, 0x50, 0x0a, 0x8b, 0x98, 0x06, 0xa3, 0x01, 0xa3, 0x90, 0x39,
	0x17, 0x37, 0xc8, 0x5a, 0x98, 0x9b, 0x88, 0xd4, 0xaa, 0xc4, 0x90, 0xc4, 0x06, 0xf6, 0x9a, 0x31,
	0x20, 0x00, 0x00, 0xff, 0xff, 0xa2, 0xce, 0xa8, 0x84, 0xed, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessagingServiceClient is the client API for MessagingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessagingServiceClient interface {
	// unary call
	StreamMessages(ctx context.Context, opts ...grpc.CallOption) (MessagingService_StreamMessagesClient, error)
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type messagingServiceClient struct {
	cc *grpc.ClientConn
}

func NewMessagingServiceClient(cc *grpc.ClientConn) MessagingServiceClient {
	return &messagingServiceClient{cc}
}

func (c *messagingServiceClient) StreamMessages(ctx context.Context, opts ...grpc.CallOption) (MessagingService_StreamMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessagingService_serviceDesc.Streams[0], "/messaging.MessagingService/StreamMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingServiceStreamMessagesClient{stream}
	return x, nil
}

type MessagingService_StreamMessagesClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type messagingServiceStreamMessagesClient struct {
	grpc.ClientStream
}

func (x *messagingServiceStreamMessagesClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messagingServiceStreamMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagingServiceClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/messaging.MessagingService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagingServiceServer is the server API for MessagingService service.
type MessagingServiceServer interface {
	// unary call
	StreamMessages(MessagingService_StreamMessagesServer) error
	SendMessage(context.Context, *Message) (*Message, error)
}

// UnimplementedMessagingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMessagingServiceServer struct {
}

func (*UnimplementedMessagingServiceServer) StreamMessages(srv MessagingService_StreamMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessages not implemented")
}
func (*UnimplementedMessagingServiceServer) SendMessage(ctx context.Context, req *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}

func RegisterMessagingServiceServer(s *grpc.Server, srv MessagingServiceServer) {
	s.RegisterService(&_MessagingService_serviceDesc, srv)
}

func _MessagingService_StreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessagingServiceServer).StreamMessages(&messagingServiceStreamMessagesServer{stream})
}

type MessagingService_StreamMessagesServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type messagingServiceStreamMessagesServer struct {
	grpc.ServerStream
}

func (x *messagingServiceStreamMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messagingServiceStreamMessagesServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessagingService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messaging.MessagingService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).SendMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessagingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messaging.MessagingService",
	HandlerType: (*MessagingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _MessagingService_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessages",
			Handler:       _MessagingService_StreamMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "messaging.proto",
}
